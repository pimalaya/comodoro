name: release

on:
  push:
    tags:
      - v*

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false

  deploy_linux_macos_github:
    runs-on: ${{ matrix.os }}
    needs: create_release
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            os_name: linux
          - os: macos-latest
            os_name: macos
    steps:
      - name: Checkout code
        uses: actions/checkout@v2        
      - name: Cache Nix store
        uses: actions/cache@v3
        id: nix-cache
        with:
          path: /tmp/nix-cache
          key: nix-${{ hashFiles('**/*.nix') }}
      - name: Cache Cargo target folder
        uses: actions/cache@v3
        with:
          path: '**/target/release'
          key: cargo-release-${{ hashFiles('**/Cargo.toml') }}
      - name: Install Nix
        uses: cachix/install-nix-action@v20
        with:
          nix_path: nixpkgs=channel:nixos-22.11
          extra_nix_config: |
            experimental-features = nix-command flakes
      - name: Import Nix store cache
        if: ${{ steps.nix-cache.outputs.cache-hit == 'true' }}
        run: nix-store --import < /tmp/nix-cache
      - name: Build release
        run: nix develop -c cargo build --release
      - name: Compress executable
        run: |
          mkdir -p {man,completions}
          mv target/release/comodoro .
          ./comodoro man ./man
          ./comodoro completion bash > ./completions/comodoro.bash
          ./comodoro completion elvish > ./completions/comodoro.elvish
          ./comodoro completion fish > ./completions/comodoro.fish
          ./comodoro completion powershell > ./completions/comodoro.powershell
          ./comodoro completion zsh > ./completions/comodoro.zsh
          tar czf comodoro.tar.gz comodoro man completions
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: comodoro.tar.gz
          asset_name: comodoro-${{ matrix.os_name }}.tar.gz
          asset_content_type: application/gzip
      - name: Export Nix store cache
        if: ${{ steps.nix-cache.outputs.cache-hit != 'true' }}
        run: nix-store --export $(find /nix/store -maxdepth 1 -name '*-*') > /tmp/nix-cache

  deploy_windows_github:
    runs-on: windows-latest
    needs: create_release
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Check project
        uses: actions-rs/cargo@v1
        with:
          command: check
      - name: Builds release
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
      - name: Compress executable
        run: |
          mkdir man
          mkdir completions
          move target/release/comodoro.exe .
          ./comodoro.exe man ./man
          ./comodoro.exe completion bash > ./completions/comodoro.bash
          ./comodoro.exe completion elvish > ./completions/comodoro.elvish
          ./comodoro.exe completion fish > ./completions/comodoro.fish
          ./comodoro.exe completion powershell > ./completions/comodoro.powershell
          ./comodoro.exe completion zsh > ./completions/comodoro.zsh
          tar czf comodoro.tar.gz comodoro.exe man completions
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: comodoro.tar.gz
          asset_name: comodoro-windows.tar.gz
          asset_content_type: application/gzip

  deploy_musl_github:
    runs-on: ubuntu-latest
    needs: create_release
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build release
        run: |
          docker run -v "${PWD}:/volume" --rm -t clux/muslrust:stable /bin/bash -c "cargo build --release && \
          cd target/x86_64-unknown-linux-musl/release && \
          mkdir -p {man,completions} && \
          ./comodoro man ./man && \
          ./comodoro completion bash > ./completions/comodoro.bash && \
          ./comodoro completion elvish > ./completions/comodoro.elvish && \
          ./comodoro completion fish > ./completions/comodoro.fish && \
          ./comodoro completion powershell > ./completions/comodoro.powershell && \
          ./comodoro completion zsh > ./completions/comodoro.zsh"
      - name: Compress executable
        run: |
          tar czf comodoro.tar.gz -C target/x86_64-unknown-linux-musl/release comodoro man completions
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: comodoro.tar.gz
          asset_name: comodoro-musl.tar.gz
          asset_content_type: application/gzip

  deploy_crates:
    runs-on: ubuntu-latest
    needs: create_release
    steps:
      - name: Checkout code
        uses: actions/checkout@v2        
      - name: Cache Nix store
        uses: actions/cache@v3
        id: nix-cache
        with:
          path: /tmp/nix-cache
          key: nix-${{ hashFiles('**/*.nix') }}
      - name: Cache Cargo target folder
        uses: actions/cache@v3
        with:
          path: '**/target/release'
          key: cargo-release-${{ hashFiles('**/Cargo.toml') }}
      - name: Install Nix
        uses: cachix/install-nix-action@v20
        with:
          nix_path: nixpkgs=channel:nixos-22.11
          extra_nix_config: |
            experimental-features = nix-command flakes
      - name: Import Nix store cache
        if: ${{ steps.nix-cache.outputs.cache-hit == 'true' }}
        run: nix-store --import < /tmp/nix-cache
      - name: Publish library to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: nix develop -c cargo publish --token ${CARGO_REGISTRY_TOKEN}
      - name: Export Nix store cache
        if: ${{ steps.nix-cache.outputs.cache-hit != 'true' }}
        run: nix-store --export $(find /nix/store -maxdepth 1 -name '*-*') > /tmp/nix-cache
